name: ü§óÁ©∫Èó¥Ëá™Âä®ÊûÑÂª∫
on:
  workflow_dispatch:
  schedule:
    - cron: '0 20 * * *'

env:
  HF_TOKEN: ${{ secrets.HF_TOKEN }}
  USERNAME: ${{ secrets.USERNAME }}
  SPACE_LIST: ${{ secrets.SPACE_LIST }}
  SPACE_TIMEOUT_SECONDS: 600
  GLOBAL_TIMEOUT_SECONDS: 1800
  TZ: Asia/Shanghai

jobs:
  rebuild:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ÈÖçÁΩÆgit
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - run: pip install requests pytz

      - id: rebuild
        run: |
          python <<EOF
          import requests, time, os, datetime, logging
          import pytz

          logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

          hf_token = os.environ["HF_TOKEN"]
          username = os.environ["USERNAME"]
          space_list_str = os.environ.get("SPACE_LIST", "")
          space_list = [space.strip() for space in space_list_str.split(",") if space.strip()]
          space_timeout_seconds = int(os.environ.get("SPACE_TIMEOUT_SECONDS", 600))
          global_timeout_seconds = int(os.environ.get("GLOBAL_TIMEOUT_SECONDS", 1800))

          def rebuild_space(space_name, timeout_seconds):
              full_space_name = f"{username}/{space_name}"
              logging.info(f"ÂºÄÂßãÈáçÊñ∞ÊûÑÂª∫Á©∫Èó¥: {full_space_name}")
              rebuild_url = f"https://huggingface.co/api/spaces/{full_space_name}/restart?factory=true"
              status_url = f"https://huggingface.co/api/spaces/{full_space_name}/runtime"

              headers = {"Authorization": f"Bearer {hf_token}", "Content-Type": "application/json"}

              try:
                  response = requests.post(rebuild_url, headers=headers)
                  response.raise_for_status()
                  logging.info(f"‚úÖÁ©∫Èó¥{space_name}ÈáçÊñ∞ÊûÑÂª∫ËØ∑Ê±ÇÂèëÈÄÅÊàêÂäü")
              except requests.exceptions.RequestException as e:
                  logging.error(f"‚ùåÁ©∫Èó¥{space_name}ÈáçÊñ∞ÊûÑÂª∫ËØ∑Ê±ÇÂ§±Ë¥•: {e}")
                  return False

              start_time = time.time()
              attempt = 0
              max_attempts = 10
              while time.time() - start_time < timeout_seconds and attempt < max_attempts:
                  time.sleep(30)
                  try:
                      status_response = requests.get(status_url, headers=headers)
                      status_response.raise_for_status()
                      status_data = status_response.json()
                      stage = status_data.get("stage", "")
                      logging.info(f"Á©∫Èó¥{space_name}ÂΩìÂâçÁä∂ÊÄÅ: {stage}")
                      if stage == "RUNNING":
                          logging.info(f"‚úÖÁ©∫Èó¥{space_name}Â∑≤ÊàêÂäüÈáçÊñ∞ÊûÑÂª∫!")
                          return True
                      elif "ERROR" in stage:
                          logging.error(f"‚ùåÁ©∫Èó¥{space_name}ÊûÑÂª∫Â§±Ë¥•: {stage}")
                          return False
                  except requests.exceptions.RequestException as e:
                      logging.error(f"‚ùåÁ©∫Èó¥{space_name}Áä∂ÊÄÅËØ∑Ê±ÇÂ§±Ë¥•: {e}")
                      return False
                  except Exception as e:
                      logging.exception(f"‚ùåÁ©∫Èó¥{space_name}ÂèëÁîüÊú™Áü•ÈîôËØØ: {e}")
                      return False
                  attempt += 1

              logging.warning(f"‚ö†Ô∏èÁ©∫Èó¥{space_name}ÊûÑÂª∫Áä∂ÊÄÅÊú™Áü• (Ë∂ÖÊó∂ÊàñËææÂà∞ÊúÄÂ§ßÂ∞ùËØïÊ¨°Êï∞)")
              return None

          start_time = time.time()
          results = []
          for space in space_list:
              if time.time() - start_time > global_timeout_seconds:
                  logging.warning(f"‚ö†Ô∏èÂÖ®Â±ÄË∂ÖÊó∂ÔºåÂâ©‰ΩôÁ©∫Èó¥Êú™Â§ÑÁêÜ")
                  break
              result = rebuild_space(space, space_timeout_seconds)
              results.append({"space": space, "result": result})

          summary_plain = f"ÊÄªËÆ°Á©∫Èó¥Êï∞: {len(space_list)}\n"
          summary_plain += f"ÊàêÂäüÊï∞Èáè: {sum(1 for r in results if r['result'] is True)}\n"
          summary_plain += f"Â§±Ë¥•Êï∞Èáè: {sum(1 for r in results if r['result'] is False)}\n"
          summary_plain += f"Êú™Áü•Áä∂ÊÄÅÊï∞Èáè: {sum(1 for r in results if r['result'] is None)}\n"
          summary_plain += f"{'-'*50}\nÂÖ∑‰ΩìÁªìÊûú:\n"
          for r in results:
              status = "‚úÖ" if r['result'] is True else ("‚ùå" if r['result'] is False else "‚ùì")
              summary_plain += f"{status} {r['space']}\n"

          print("ÊûÑÂª∫ÁªìÊûúÊëòË¶ÅÔºö")
          print(summary_plain)

          exit_code = 1 if any(r['result'] is False or r['result'] is None for r in results) else 0

          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"exit_code={exit_code}\n")
              escaped_summary = summary_plain.replace('\n', '%0A')
              f.write(f"summary={escaped_summary}\n")

          if exit_code != 0:
              exit(1)
          else:
              exit(0)
          EOF

      - name: ÁîüÊàêÊûÑÂª∫Êó•Âøó
        if: always()
        run: |
          mkdir -p docs
          export TZ=Asia/Shanghai
          START_TIME=$(date '+%Y-%m-%d %H:%M:%S')
          SUMMARY="${{ steps.rebuild.outputs.summary }}"
          SUMMARY="${SUMMARY//'%0A'/$'\n'}"
          
          cat > docs/build_log_$(date '+%Y%m%d').html << EOF
          <!DOCTYPE html>
          <html lang="zh-CN">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Á©∫Èó¥ÊûÑÂª∫Êó•Âøó - $(date '+%Y-%m-%d')</title>
              <style>
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
                      margin: 0;
                      padding: 20px;
                      color: #333;
                      line-height: 1.6;
                      background-color: #f5f5f5;
                  }
                  .container {
                      max-width: 800px;
                      margin: 0 auto;
                      background: #fff;
                      padding: 30px;
                      border-radius: 10px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                  }
                  h1 {
                      color: #2c3e50;
                      text-align: center;
                      margin-bottom: 30px;
                      padding-bottom: 10px;
                      border-bottom: 2px solid #eee;
                  }
                  .log-entry {
                      background: #f8f9fa;
                      padding: 20px;
                      margin: 15px 0;
                      border-radius: 8px;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
                  }
                  .log-entry p {
                      margin: 10px 0;
                  }
                  .success { color: #28a745; }
                  .timestamp { color: #666; }
                  .footer {
                      text-align: center;
                      margin-top: 30px;
                      padding-top: 20px;
                      border-top: 1px solid #eee;
                      color: #666;
                  }
                  .footer a {
                      color: #0366d6;
                      text-decoration: none;
                  }
                  .footer a:hover {
                      text-decoration: underline;
                  }
                  @media (max-width: 600px) {
                      body { padding: 10px; }
                      .container { padding: 15px; }
                  }
                  pre {
                      background: #f8f9fa;
                      padding: 15px;
                      border-radius: 5px;
                      overflow-x: auto;
                      white-space: pre-wrap;
                      word-wrap: break-word;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>Á©∫Èó¥ÊûÑÂª∫Êó•Âøó</h1>
                  <div class="log-entry">
                      <p><strong>ÊûÑÂª∫Êó∂Èó¥:</strong> <span class="timestamp">${START_TIME}</span></p>
                      <p><strong>Ëß¶Âèë‰∫ã‰ª∂:</strong> ${GITHUB_EVENT_NAME}</p>
                      <p><strong>Â∑•‰ΩúÊµÅÁ®ã:</strong> <a href="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" target="_blank">Êü•ÁúãËØ¶ÊÉÖ</a></p>
                      <p><strong>ÊûÑÂª∫ÁªìÊûú:</strong></p>
                      <pre>${SUMMARY}</pre>
                  </div>
                  <div class="footer">
                      <p><a href="https://linux.do" target="_blank">LINUX DO</a></p>
                  </div>
              </div>
          </body>
          </html>
          EOF

          if [ ! -f docs/index.html ]; then
            cat > docs/index.html << EOF
          <!DOCTYPE html>
          <html lang="zh-CN">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Á©∫Èó¥ÊûÑÂª∫Êó•ÂøóÁ¥¢Âºï</title>
              <style>
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
                      margin: 0;
                      padding: 20px;
                      color: #333;
                      line-height: 1.6;
                      background-color: #f5f5f5;
                  }
                  .container {
                      max-width: 800px;
                      margin: 0 auto;
                      background: #fff;
                      padding: 30px;
                      border-radius: 10px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                  }
                  h1 {
                      color: #2c3e50;
                      text-align: center;
                      margin-bottom: 30px;
                      padding-bottom: 10px;
                      border-bottom: 2px solid #eee;
                  }
                  .log-list {
                      list-style: none;
                      padding: 0;
                  }
                  .log-list li {
                      margin: 10px 0;
                      padding: 15px;
                      background: #f8f9fa;
                      border-radius: 8px;
                      transition: all 0.3s ease;
                  }
                  .log-list li:hover {
                      background: #e9ecef;
                      transform: translateX(5px);
                  }
                  .log-list a {
                      text-decoration: none;
                      color: #0366d6;
                      display: block;
                  }
                  .footer {
                      text-align: center;
                      margin-top: 30px;
                      padding-top: 20px;
                      border-top: 1px solid #eee;
                      color: #666;
                  }
                  .footer a {
                      color: #0366d6;
                      text-decoration: none;
                  }
                  .footer a:hover {
                      text-decoration: underline;
                  }
                  @media (max-width: 600px) {
                      body { padding: 10px; }
                      .container { padding: 15px; }
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>Á©∫Èó¥ÊûÑÂª∫Êó•ÂøóÁ¥¢Âºï</h1>
                  <ul class="log-list">
          EOF
          fi

          sed -i "/<ul class=\"log-list\">/a \        <li><a href=\"build_log_$(date '+%Y%m%d').html\">$(date '+%Y-%m-%d') ÊûÑÂª∫Êó•Âøó</a></li>" docs/index.html

          if ! grep -q "</body>" docs/index.html; then
            echo "                  </ul>" >> docs/index.html
            echo "                  <div class=\"footer\">" >> docs/index.html
            echo "                      <p><a href=\"https://linux.do\" target="_blank">LINUX DO</a></p>" >> docs/index.html
            echo "                  </div>" >> docs/index.html
            echo "              </div>" >> docs/index.html
            echo "          </body>" >> docs/index.html
            echo "          </html>" >> docs/index.html
          fi

      - name: Êèê‰∫§ÊûÑÂª∫Êó•Âøó
        if: always()
        run: |
          git add docs/
          git commit -m "Update build logs [skip ci]" || echo "No changes to commit"
          git push origin ${GITHUB_REF_NAME}

      - if: always()
        run: exit ${{ steps.rebuild.outputs.exit_code }}

      - if: always()
        run: echo "üèÅÊûÑÂª∫ÊµÅÁ®ãÂ∑≤ÂÆåÊàê"
